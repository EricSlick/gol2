Worklog
Eric Slick

Project: Game of Life 2

Note: Since I did this test three years ago, I decided that just re-submitting the old code was insufficient and I wanted
      to make something more than just another simple GOL, so I worked out the following as potential ways to improve it.
      As such, I committed to spending a significant amount of time to this to try and give you something additional to
      look at.

Goals:
 Implementation
   - recreate a cleaner and more efficient version of GOL compared with the last submission
   - implemented classic GOL visualized, but also...
   - add one or two new features to give a twist on the basic "game" revolving around this type of thing...
     - colonies
       - colonies that compete with other colonies
     - game
       - compete with the ai to see who's colony wins
       - there will be some kind of simple leveling up for the colony and cells
         - alter GOL base rules: death, birth, overcrowding
         - add "war" to concept...with competing colonies vying for survival
           - colony cell dies if it has more other colony cells adjacent (as if by war)
           - both cell dies if equal number of colony cells adjacent (as if by
           - leveling up can alter these rules such as when a cell dies
       - player and ai can make decisions on how to level up their colony
   - improve on the visual aspects of the last version.
   - improve the UI

 Testing
   - Use TDD with a BDD(ish) twist using rspec without a formal BDD tool
       note: this approach was inspired by a fellow programmer a couple years ago and thought to try it out again here.
             I experimented with it, and the testing shows it as I evolved it over time. It's an experiment, after all
             in trying a different twist on the standard testing approach.

Design
 Base
   - Implement Conway's Game of Life
 Extended
   - Implement competing cell groups (evolve the cells and implement some sort of attraction to keep them grouped
   - UI allows for realtime tweaks to the GOL and allow player competition against the computer

Tools
  - RubyMine 8.0.2
  - Ruby 2.3.4 [edit changed to 2.0.0 due to issues noted below)
  - rvm
  - git 2.6.3

---

Worklog

note: Since I wasn't doing this as a formal test, I used the time to pursue several avenues of approach. I committed to
      doing a significant amount of time for this project as I wanted it to reflect

  setup, prep and spiking
    Tried out gemstash, but later removed it over concerns it may have been contributing to a segfault issue and it
      didn't provide anything valuable for this project.  Just a chance to experiment with it.

    Decided to make it a gem to provide an easy way to drop this into another code base. Worked on making it so the
      gem could fork many copies of the game but set that aside due to some unexpected issues with gosu. Plus, I did
      it as an experiment more than it having any clear value.

  Data Structure
  I started by thinking through the data structure. I attempted to come up with a scheme that would be efficient with
    memory and allow for greater efficiency
    I create cells and never destroy them. I keep a list of active cells (these include both live and dead cells). I
      wanted each cell to just know about its neighbors. My first implementation was to keep a list of surrounding
      cells, but later decided to keep all cell management in the game controller and not have the cell manage its
      list of surrounding cells. Each cell only knows itself and relies on the game controller to give it a list
      of live cells, manage the birthing and funerals for each cell.
    I kept the basic GOL rules with the cell for efficiency and since the rules are so simple to implement. However,
      as I progress, the rules will become more complex and so this will probably be best broken out into its own class.
    For simplicity, I presumed a rigid grid structure, but in the future, I want to try out an approach that frees cells
      from this and treats them more like free-floating cells that are not perfectly aligned in a grid. In that case,
      nearness becomes the way to determine how many cells would be near enough to count. I think this opens some
      interesting possibilities where cells can express life a little more dynamically.
  GameController
  Once I had the GOL rules working, and I was happy with the data structure, I started the game controller
     This, simply handles the tracking of cells on the gameboard and is responsible for the creation and getting of
     cells and the update loop.
  Once the game controller was working reasonably well, I started on the visualization, I didn't realize how tough this
     would be. I lost a lot of time trying to deal with incompatibilities between gosu (and it's requisites), rspec,
     gemstash, forking, rvm and the ruby version. I finally got to a working state, but had to drop to ruby 2.0.0,
     remove rvm and re-install brew without rvm and then re-install rvm to get things working together happily. This
     is something I need to work on later, but with a working stack, I would make progress again.
  I got a basic visualization working, tweaked the visual aspects of the cells and started working on a simple UI

















