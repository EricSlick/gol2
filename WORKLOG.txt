Worklog
Eric Slick

Project: Game of Life 2

Note: Since I did this test three years ago, I decided that just re-submitting the old code was insufficient and have
      re-implemented with the main goal of showing how my skills have improved over the last three years. Because I'm
      expanding the goals of the normal test, I expect it to take me longer than usual. I've created a rough timeline
      of when I started and when I finished along with notes on what I was doing, researching, thinking, etc.

Goals:
 Implementation
   - recreate a cleaner and more efficient version of GOL compared with the last submission
   - add one or two new features to give a twist on the basic "game" by giving it a gaming twist of some sort.
   - improve on the visual aspects of the last version.
   - improve the UI
   - more efficient memory handling (IE, reduce GC activity)
     - perhaps tweak the GC settings
   - a more efficient runtime

 Testing
   - Use TDD
   - Add a BDD aspect using rspec without Cucumber (an alternative approach to creating BDD tests I used based on
       a fellow developer's thoughts and ideas on a cleaner (and more limited) approach to integration/bdd type testing.

Design
 Base
   - Implement Conway's Game of Life
 Extended
   - Implement competing cell groups (evolve the cells and implement some sort of attraction to keep them grouped
   - UI allows for realtime tweaks to the GOL and allow player competition against the computer

Tools
  - RubyMine 8.0.2
  - Ruby 2.3.4
  - rvm
  - git 2.6.3

---

Worklog

12/29/2015
3:00 - 3:30 (ish)
  - after chatting with Shelly, looked up old code, and decided to re-implement rather than just improve.
  - pulled down and looked over old code
  - thought through some ideas on what I could do to improve on it

12/30/2015
  - morning
    - briefly set up project as a gem using bundler
  - break (family and holiday stuff)
    - Thinking about what I could do to extend the design of GOL that was reasonable to do in a short timeframe
  - 3:30 (setup)
    - set up this worklog.txt and created a basic goal and put down extended design ideas
    - added gemset and ruby version
    - decided to update to ruby 2.3.4
    - bundler/rspec/ruby-version/ruby-gemset
    - using gemstash (just wanted to have an excuse to use it)
    - moved auto-generated rspec test to mirror location in code
  - 4:45 Spiking Concepts
    - parent/child process communications
    - since this is an interest of mine I took far more time looking into this than I would have when doing a normal
      test.  I spent a lot of time looking to further my own understanding of forking and inter-process communications
      communications. However, I treated this like a spike to explore the viability of a specific solution and thought
      it would be a good thing to show how I approached this spike
      - testing child processes is always a challenge. I have done this previously by using IO pipes and
        listening for messages. This time I wanted to try out some different approaches and test using sockets
        instead of pipes. I wanted to see if I could make the asynchronous nature of testing child processes
        simpler. I wanted to have a solution that would work on Windows too.
      - I first explored the read/write using pipes as I was familiar with them
      - I dug deep into Process module and read a number of articles on the web, including this particularly useful
        one: http://allenlsy.com/working-with-unix-process-in-ruby/
      - able to set up a non-blocking wait and a trap for child exit (might not work in windows)
      - I spent plenty of time digging into the code and testing various things to determine how they worked and
        if I could get more out of it. For instance, trapping for the child exit allowed me to reliably control
        knowing when a child process was running or not and is cleaner than doing some of the other methods that rely
        on exception handling to see if a child process is currently running.
      - Spawn is an interesting possibility but couldn't determine useful benefit over forking, so put it aside for now.
        I should probably explore it in greater detail
      - Sockets may be better than pipes for windows compatibility.
  - 8:20 breaking off spike...will use sockets and fork with no-blocking wait with trap for child process exiting.
    - basic game loop strategy implemented

  1/01/2015





